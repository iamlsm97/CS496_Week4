#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('backend:server')
var http = require('http')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Link socket.io to server
 */
var io = require('socket.io')(server)


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * socket.io Listener & Emitter
 */
let Models = require('../models/schema')
let numUsers = {}
// let numUsers = 0
let hits = []

let hitHelper = function (socket, roomID, message, room1, pcl) {
  console.log(room1)
  if (pcl.length === 0) {
    io.to(roomID).emit('userDead', {
      player: socket.nickname,
      player0CardList: room1.player0CardList,
      player1CardList: room1.player1CardList,
      player2CardList: room1.player2CardList,
      player3CardList: room1.player3CardList,
      gameCardList: room1.gameCardList,
    })
    if (room1.currentAlive === 1) {
      io.to(roomID).emit('gameOver', {
        player: room1.userList[room1.currentAlive[0]],
        player0CardList: room1.player0CardList,
        player1CardList: room1.player1CardList,
        player2CardList: room1.player2CardList,
        player3CardList: room1.player3CardList,
        gameCardList: room1.gameCardList,
      })
    }
  }
  else {
    io.to(roomID).emit(message, {
      player: socket.nickname,
      player0CardList: room1.player0CardList,
      player1CardList: room1.player1CardList,
      player2CardList: room1.player2CardList,
      player3CardList: room1.player3CardList,
      gameCardList: room1.gameCardList,
    })
  }
}

io.on('connection', function (socket) {

  console.log("-----socket connected")

  let roomID
  let addedUser = false

  socket.on('register', (data) => {
    socket.nickname = data.nickname
  })

  // when the client emits 'new message', this listens and executes
  socket.on('newMessage', function (data) {
    // we tell the client to execute 'new message'
    console.log("-----socket got a new message")
    socket.to(roomID).emit('newMessage', {
      nickname: socket.nickname,
      message: data,
    })
  })

  // when the client emits 'add user', this listens and executes
  socket.on('addUser', function (data) {
    console.log("-----socket add user")

    if (addedUser) return

    roomID = data.roomID

    // we store the nickname in the socket session for this client
    if (numUsers[roomID]) {
      ++numUsers[roomID]
    } else {
      numUsers[roomID] = 1
    }
    addedUser = true
    socket.join(roomID)
    socket.emit('login', {
      numUsers: numUsers[roomID],
    })
    // echo globally (all clients) that a person has connected
    socket.broadcast.to(roomID).emit('userJoined', {
      nickname: socket.nickname,
      numUsers: numUsers[roomID],
    })
  })

  // when the client emits 'game start', this listens and executes
  socket.on('gameStart', function (data) {
    console.log("-----splitting cards")

    roomID = data.roomID

    const cards = Array.from(new Array(52), (x, i) => i + 1)

    for (let i = cards.length; i; i--) {
      let j = Math.floor(Math.random() * i)
      console.log(j)
      let temp = cards[j]
      cards[j] = cards[i - 1]
      cards[i - 1] = temp
    }


    Models.Room.findByIdAndUpdate(roomID, {
      player0CardList: cards.slice(0, 13),
      player1CardList: cards.slice(13, 26),
      player2CardList: cards.slice(26, 39),
      player3CardList: cards.slice(39, 52),
    }, { new: true }, function (err, room) {
      if (err) {
        console.log('card splitting error')
        socket.emit('startError')
      }
      else {
        console.log('success')
        hitHelper(socket, roomID, 'gameStarted', room, [1])
      }
    })
  })

  // when client clicks, executes playing a card
  socket.on('hit', function (data) {
    console.log('-----someone hit!')
    console.log(socket.nickname)
    hits.push(socket.nickname)
    console.log(hits)
    roomID = data.roomID
    console.log(roomID)
    let correct = false

    Models.Room.findById(roomID, function (err, room) {

      if (err) {
        console.log('hit error')
        socket.emit('hitError')
      }
      else {
        console.log('found room')
        let rule = room.rule
        let gcl = room.gameCardList
        switch (rule) {
          case 'Doubles':
            console.log("Doubles!")
            if (gcl.length < 2) {
              correct = false
              console.log("wrong hit")
            }
            else if ((gcl[gcl.length - 1] % 13) != (gcl[gcl.length - 2] % 13)) {
              correct = false
              console.log('wrong hit')
            }
            else {
              correct = true
              console.log('correct hit')
            }
            break
          case 'Consecutives':
            console.log("Consecutives!")
            if (gcl.length < 2) {
              correct = false
              console.log("wrong hit")
            }
            else if ((gcl[gcl.length - 1] % 13) != ((gcl[gcl.length - 2] - 1) % 13) || (gcl[gcl.length - 1] % 13) != ((gcl[gcl.length - 2] + 1) % 13)) {
              correct = false
              console.log('wrong hit')
            }
            else {
              correct = true
              console.log('correct hit')
            }
            break
        }
        console.log('after switch')
        if (correct && hits[0] == socket.nickname) {
          let idx = -1
          for (let i = 0; i < room.userList.length; i++) {
            if (room.userList[i] == socket.nickname) {
              idx = i
              console.log('found user ' + i)
              break
            }
          }
          switch (idx) {
            case 0:
              Models.Room.findByIdAndUpdate(roomID, {
                gameCardList: [],
                player0CardList: [...room.player0CardList, ...room.gameCardList],
              }, { new: true }, function (err, room1) {
                if (err) console.log("update winner0 error")
                else {
                  console.log('update winner0!')
                  hitHelper(socket, roomID, 'hitWin', room1, [1])
                }
              })
              break
            case 1:
              Models.Room.findByIdAndUpdate(roomID, {
                gameCardList: [],
                player1CardList: [...room.player1CardList, ...room.gameCardList],
              }, { new: true }, function (err, room1) {
                if (err) console.log("update winner1 error")
                else {
                  console.log('update winner1!')
                  hitHelper(socket, roomID, 'hitWin', room1, [1])
                }
              })
              break
            case 2:
              Models.Room.findByIdAndUpdate(roomID, {
                gameCardList: [],
                player2CardList: [...room.player2CardList, ...room.gameCardList],
              }, { new: true }, function (err, room1) {
                if (err) console.log("update winner2 error")
                else {
                  console.log('update winner2!')
                  hitHelper(socket, roomID, 'hitWin', room1, [1])
                }
              })
              break
            case 3:
              Models.Room.findByIdAndUpdate(roomID, {
                gameCardList: [],
                player3CardList: [...room.player3CardList, ...room.gameCardList],
              }, { new: true }, function (err, room1) {
                if (err) console.log("update winner3 error")
                else {
                  console.log('update winner3!')
                  hitHelper(socket, roomID, 'hitWin', room1, [1])
                }
              })
              break
          }
          hits = []
        }
        else if (correct) {
          io.to(roomID).emit('hitDraw')
        }
        else {
          let idx = -1
          for (let i = 0; i < room.userList.length; i++) {
            if (room.userList[i] == socket.nickname) {
              idx = i
              console.log('found user')
              break
            }
          }
          let pcl = []
          let cal = []
          switch (idx) {
            case 0:
              gcl.unshift(room.player0CardList[0])
              pcl = room.player0CardList.slice()
              pcl.shift()
              cal = room.currentAlive.slice()
              cal.shift()
              if (pcl.length === 0) {
                Models.Room.findByIdAndUpdate(roomID, {
                  gameCardList: gcl,
                  player0CardList: pcl,
                  currentAlive: cal,
                }, { new: true }, function (err, room1) {
                  if (err) console.log("update loser0 error")
                  else {
                    console.log("update loser0")
                    hitHelper(socket, roomID, 'hitLoss', room1, pcl)
                  }
                })
              }
              else {
                Models.Room.findByIdAndUpdate(roomID, {
                  gameCardList: gcl,
                  player0CardList: pcl,
                }, { new: true }, function (err, room1) {
                  if (err) console.log("update loser0 error")
                  else {
                    console.log("update loser0")
                    hitHelper(socket, roomID, 'hitLoss', room1, pcl)
                  }
                })
              }
              break
            case 1:
              gcl.unshift(room.player1CardList[0])
              pcl = room.player1CardList.slice()
              pcl.shift()
              cal = room.currentAlive.slice()
              cal.splice(1, 1)
              if (pcl.length === 0) {
                Models.Room.findByIdAndUpdate(roomID, {
                  gameCardList: gcl,
                  player1CardList: pcl,
                  currentAlive: cal,
                }, { new: true }, function (err, room1) {
                  if (err) console.log("update loser1 error")
                  else {
                    console.log("update loser1")
                    hitHelper(socket, roomID, 'hitLoss', room1, pcl)
                  }
                })
              }
              else {
                Models.Room.findByIdAndUpdate(roomID, {
                  gameCardList: gcl,
                  player1CardList: pcl,
                }, { new: true }, function (err, room1) {
                  if (err) console.log("update loser1 error")
                  else {
                    console.log("update loser1")
                    hitHelper(socket, roomID, 'hitLoss', room1, pcl)
                  }
                })
              }
              break
            case 2:
              gcl.unshift(room.player2CardList[0])
              pcl = room.player2CardList.slice()
              pcl.shift()
              cal = room.currentAlive.slice()
              cal.splice(2, 1)
              if (pcl.length === 0) {
                Models.Room.findByIdAndUpdate(roomID, {
                  gameCardList: gcl,
                  player2CardList: pcl,
                  currentAlive: cal,
                }, { new: true }, function (err, room1) {
                  if (err) console.log("update loser2 error")
                  else {
                    console.log("update loser2")
                    hitHelper(socket, roomID, 'hitLoss', room1, pcl)
                  }
                })
              }
              else {
                Models.Room.findByIdAndUpdate(roomID, {
                  gameCardList: gcl,
                  player2CardList: pcl,
                }, { new: true }, function (err, room1) {
                  if (err) console.log("update loser2 error")
                  else {
                    console.log("update loser2")
                    hitHelper(socket, roomID, 'hitLoss', room1, pcl)
                  }
                })
              }
              break
            case 3:
              gcl.unshift(room.player3CardList[0])
              pcl = room.player3CardList.slice()
              pcl.shift()
              cal = room.currentAlive.slice()
              cal.pop()
              if (pcl.length === 0) {
                Models.Room.findByIdAndUpdate(roomID, {
                  gameCardList: gcl,
                  player3CardList: pcl,
                  currentAlive: cal,
                }, { new: true }, function (err, room1) {
                  if (err) console.log("update loser3 error")
                  else {
                    console.log("update loser3")
                    hitHelper(socket, roomID, 'hitLoss', room1, pcl)
                  }
                })
              }
              else {
                Models.Room.findByIdAndUpdate(roomID, {
                  gameCardList: gcl,
                  player3CardList: pcl,
                }, { new: true }, function (err, room1) {
                  if (err) console.log("update loser3 error")
                  else {
                    console.log("update loser3")
                    hitHelper(socket, roomID, 'hitLoss', room1, pcl)
                  }
                })
              }
              break
          }
          hits = []
        }
      }
    })
  })

  // when the client emits 'typing', we broadcast it to others
  socket.on('typing', function () {
    console.log("-----socket typing")
    io.to(roomID).emit('typing', {
      nickname: socket.nickname,
    })
  })

  // when the client emits 'stop typing', we broadcast it to others
  socket.on('stopTyping', function () {
    console.log("-----socket stop typing")
    io.to(roomID).emit('stopTyping', {
      nickname: socket.nickname,
    })
  })

  socket.on('exitRoom', () => {
    console.log("-----socket exitRoom")
    if (addedUser) {
      --numUsers[roomID]
      addedUser = false

      // echo globally that this client has left
      socket.to(roomID).emit('userLeft', {
        nickname: socket.nickname,
        numUsers: numUsers[roomID],
      })
    }

    socket.leave(roomID)
  })

  // when the user disconnects.. perform this
  socket.on('disconnect', function () {
    console.log("-----socket disconnected")
    if (addedUser) {
      --numUsers[roomID]
      addedUser = false

      // echo globally that this client has left
      socket.to(roomID).emit('userLeft', {
        nickname: socket.nickname,
        numUsers: numUsers[roomID],
      })
    }

    socket.leave(roomID)

  })

  socket.on('turnChange', (turn) => {
    console.log('-----socket turnChange')
    // change turn info of DB
    turn = (turn + 1) % 4
    io.to(roomID).emit('turnChange', turn)
  })

})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}

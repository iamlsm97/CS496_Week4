#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('backend:server')
var http = require('http')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Link socket.io to server
 */
var io = require('socket.io')(server)


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)


/**
 * socket.io Listener & Emitter
 */
let numUsers = {}
// let numUsers = 0

io.on('connection', function (socket) {

  console.log("-----socket connected")

  let roomID
  let addedUser = false

  socket.on('register', (data) => {
    socket.nickname = data.nickname
  })

  // when the client emits 'new message', this listens and executes
  socket.on('newMessage', function (data) {
    // we tell the client to execute 'new message'
    console.log("-----socket got a new message")
    socket.to(roomID).emit('newMessage', {
      nickname: socket.nickname,
      message: data,
    })
  })

  // when the client emits 'add user', this listens and executes
  socket.on('addUser', function (data) {
    console.log("-----socket add user")

    if (addedUser) return

    roomID = data.roomID

    // we store the nickname in the socket session for this client
    if (numUsers[roomID]) {
      ++numUsers[roomID]
    } else {
      numUsers[roomID] = 1
    }
    addedUser = true
    socket.join(roomID)
    socket.emit('login', {
      numUsers: numUsers[roomID],
    })
    // echo globally (all clients) that a person has connected
    socket.broadcast.to(roomID).emit('userJoined', {
      nickname: socket.nickname,
      numUsers: numUsers[roomID],
    })
  })

  // when the client emits 'typing', we broadcast it to others
  socket.on('typing', function () {
    console.log("-----socket typing")
    io.to(roomID).emit('typing', {
      nickname: socket.nickname,
    })
  })

  // when the client emits 'stop typing', we broadcast it to others
  socket.on('stopTyping', function () {
    console.log("-----socket stop typing")
    io.to(roomID).emit('stopTyping', {
      nickname: socket.nickname,
    })
  })

  socket.on('exitRoom', () => {
    console.log("-----socket exitRoom")
    if (addedUser) {
      --numUsers[roomID]
      addedUser = false

      // echo globally that this client has left
      socket.to(roomID).emit('userLeft', {
        nickname: socket.nickname,
        numUsers: numUsers[roomID],
      })
    }

    socket.leave(roomID)
  })

  // when the user disconnects.. perform this
  socket.on('disconnect', function () {
    console.log("-----socket disconnected")
    if (addedUser) {
      --numUsers[roomID]
      addedUser = false

      // echo globally that this client has left
      socket.to(roomID).emit('userLeft', {
        nickname: socket.nickname,
        numUsers: numUsers[roomID],
      })
    }

    socket.leave(roomID)

  })
})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
